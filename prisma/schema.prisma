generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  PERSONAL
  CORPORATE
}

enum PlanType {
  FREE
  PRO
  ENTERPRISE
}

model Tenant {
  id        String      @id @default(cuid())
  name      String
  type      AccountType
  domain    String?     // for corporate accounts
  plan      PlanType    @default(FREE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  users             User[]
  calendars         Calendar[]
  subscriptions     Subscription[]
  calendarSettings  CalendarSettings[]

  @@map("tenants")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  tenantId      String
  role          String    @default("USER") // USER, ADMIN, OWNER
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Calendar {
  id                String   @id @default(cuid())
  tenantId          String
  userId            String?  // null for shared calendars
  name              String
  provider          String   // "google", "microsoft", "caldav"
  providerCalendarId String
  accessToken       String   @db.Text
  refreshToken      String?  @db.Text
  expiresAt         DateTime?
  isActive          Boolean  @default(true)
  color             String   @default("#3B82F6")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  events Event[]

  @@unique([tenantId, providerCalendarId])
  @@map("calendars")
}

model Event {
  id              String    @id @default(cuid())
  calendarId      String
  providerEventId String
  title           String
  description     String?
  startTime       DateTime
  endTime         DateTime
  isAllDay        Boolean   @default(false)
  location        String?
  attendees       Json?     // Array of attendee objects
  status          String    @default("confirmed")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  calendar Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@unique([calendarId, providerEventId])
  @@map("events")
}

model Subscription {
  id                String    @id @default(cuid())
  tenantId          String
  stripeCustomerId  String    @unique
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  status            String    // active, canceled, incomplete, etc.
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  trialEnd          DateTime?
  cancelAtPeriodEnd Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model CalendarSettings {
  id                String  @id @default(cuid())
  tenantId          String  @unique
  defaultView       String  @default("week") // day, week, month
  workingHours      Json    // { start: "09:00", end: "17:00" }
  timeZone          String  @default("UTC")
  autoSync          Boolean @default(true)
  syncInterval      Int     @default(15) // minutes
  notifications     Json    // notification preferences
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("calendar_settings")
}